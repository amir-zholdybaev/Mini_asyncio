import asyncio


"""
    https://www.youtube.com/watch?v=BmOjeVM0w1U&list=PLJcqk6mrJtxCo_KqHV2rM2_a3Z8qoE5Gk

    Ассинхоррные функции в отличии от обычных, возвращают не результат работы, а сопрограмму. Сами ассинхронные функции
    также принято называть сопрограммами или корутинами

    ensure_future - принимает сопрограмму, отдает циклу событий и возвращает объект future

    get_event_loop - возвращает цикл событий

    gather - собирает сопрограммы в один объект, который можно передать в цикл событий, из этого объекта можно получить
    результаты выполнения собранных в него сопрограмм

    run_until_complete - запускает работу цикла до тех пор, пока не завершатся все переданные циклу сопрограммы
    Может возвращать результат выполенения всех переданных в нее сопрограмм
    https://www.youtube.com/watch?v=NjO9Jnul4Mc&t=220s

    close - завершение работы цикла событий

    call_soon - помещает функцию обратного вызова(не корутину) в цикл событий, а тот вызывает ее в ближайшее время, как
    только сможет

    call_later - помещает функцию обратного вызова(не корутину) в цикл событий, а тот вызывает ее через то время, которое
    передано call_later аргументом.

    call_at - вызывает функцию обратного вызова(не корутину) не через какое то время, а в указанное время

    time - получает текущее время событийного цикла. Текущее время событийного цикла означает время, которое использует
    событийный цикл для отслеживания и планирования событий.
"""


"""
    Функция корутины: функция, которая возвращает объект корутины. Функцию корутины можно определить, пользуясь
    командой async def, она может содержать ключевые слова await, async for и async with

    Функцию корутины можно рассматривать как фабрику для создания объектов корутины; точнее — не забывайте о том,
    что вызов функции корутины не приводит к выполнению кода, написанного пользователем. Вместо этого в ходе такого
    вызова лишь создаётся и возвращается объект корутины.

    Корутина: корутины — это более общая форма подпрограмм. Подпрограммы имеют одну точку входа и одну точку выхода.
    А корутины поддерживают множество точек входа, выхода и возобновления их выполнения.

    Корутина — это метод, который можно приостановить, когда у нас имеется задача, выполнение которой может занять
    много времени. Потом, когда эта задача будет завершена, метод можно возобновить. В Python 3.5. была реализована
    встроенная поддержка корутин и асинхронного программирования, тогда в язык были добавлены ключевые слова async и await.

    Подпрограмму можно запустить, её работа начнётся в одном месте и завершится в другом. А корутину можно запустить,
    потом — приостановить, потом — возобновить. Приостанавливать и возобновлять выполнение корутины можно много раз — до
    того момента, пока её работа не будет, в итоге, завершена.

    Сопрограмма (coroutine) — результат вызова асинхронной функции, представляющий собой выполнение этой
    функции, способное приостанавливаться.


    Футура (Future) - будущий результат выполнения сопрограммы.
    Future - это awaitable объект. Корутины могут await на объектах Future до тех пор, пока они не получат
    результат или набор исключений, или до тех пор, пока они не будут отменены.
    https://www.youtube.com/watch?v=2PxIoYvHra8&t


    Task - наследуется от Future


    ensure_future - Принимает сопрограмму, отдает циклу событий и возвращает объект класса Future.
    Поручает циклу событий выполнить сопрограмму и сразу же, в момент вызова, возвращает футуру, в которой будет значение,
    но неизвестно когда.


    add_done_callback - добавляет кобек функцию объекту future, которая исполнится после того, как future получит результат


    as_complited - https://www.youtube.com/watch?v=twL4lYCw8VE
"""


async def callee():
    await asyncio.sleep(1)
    return 'Hello'


async def caller():
    future2 = asyncio.ensure_future(callee())
    future = asyncio.create_task(callee())

    print(' World')


asyncio.run(caller())
